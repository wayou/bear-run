(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(320,480, Phaser.AUTO, '');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"D:\\Program Files\\github\\bear-run\\src\\js\\states\\boot.js","./states/game":"D:\\Program Files\\github\\bear-run\\src\\js\\states\\game.js","./states/menu":"D:\\Program Files\\github\\bear-run\\src\\js\\states\\menu.js","./states/preloader":"D:\\Program Files\\github\\bear-run\\src\\js\\states\\preloader.js","./states/splash":"D:\\Program Files\\github\\bear-run\\src\\js\\states\\splash.js","./utils":"D:\\Program Files\\github\\bear-run\\src\\js\\utils.js"}],"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\bird.js":[function(require,module,exports){
'use strict';

var Bird = function(game, x, y, frame) {
    Phaser.Sprite.call(this, game, x, y, 'bird', frame); //new Sprite(game, x, y, key, frame)

    // initialize your prefab here

    this.game.physics.arcade.enableBody(this);

    this.anchor.setTo(0.5, 0.5);

    this.animations.add('flap');
    this.animations.play('flap', 12, true);

};

Bird.prototype = Object.create(Phaser.Sprite.prototype);
Bird.prototype.constructor = Bird;

Bird.prototype.update = function() {

    // write your prefab's specific update code here
    if(this.angle<90){
        this.angle+=2.5;
    }

};

Bird.prototype.flap = function() {
    this.body.velocity.y = -400;

    this.game.add.tween(this).to({angle:-40},100).start();


}

module.exports = Bird;
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\ground.js":[function(require,module,exports){
'use strict';

var Ground = function(game, x, y, width, height) {
    Phaser.TileSprite.call(this, game, x, y, width, height, 'ground'); //new TileSprite(game, x, y, width, height, key, frame) 

    this.game.physics.arcade.enableBody(this);

    this.autoScroll(-200, 0);

    this.body.allowGravity = false;
    this.body.immovable=true;
};

module.exports = Ground;

Ground.prototype = Object.create(Phaser.TileSprite.prototype);
Ground.prototype.constructor = Ground;


Ground.prototype.update = function() {
    // write your prefab's specific update code here  
};
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\pipe.js":[function(require,module,exports){

var Pipe = function(game, x, y, frame) {  
  Phaser.Sprite.call(this, game, x, y, 'pipe', frame);
  this.anchor.setTo(0.5, 0.5);
  this.game.physics.arcade.enableBody(this);

  this.body.allowGravity = false;
  this.body.immovable = true;

};

Pipe.prototype = Object.create(Phaser.Sprite.prototype);  
Pipe.prototype.constructor = Pipe;

Pipe.prototype.update = function() {

};


module.exports = Pipe;  
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\pipeGroup.js":[function(require,module,exports){
var Pipe = require('./pipe');

var PipeGroup = function(game, parent) {
    Phaser.Group.call(this, game, parent);

    //top pipe
    this.topPipe = new Pipe(this.game, 0, 0, 0);
    this.add(this.topPipe);

    //bottom pipe
    this.bottomPipe = new Pipe(this.game, 0, 440, 1);
    this.add(this.bottomPipe);
    
    this.hasScored = false;
    
    this.setAll('body.velocity.x', -200);
};

PipeGroup.prototype = Object.create(Phaser.Group.prototype);
PipeGroup.prototype.constructor = PipeGroup;
PipeGroup.prototype.update = function() {
    this.checkWorldBounds(); 
};
PipeGroup.prototype.reset = function(x,y) {
    // Step 1    
    this.topPipe.reset(0, 0);

    // Step 2
    this.bottomPipe.reset(0, 440); // Step 2

    // Step 3
    this.x = x;
    this.y = y;

    // Step 4
    this.setAll('body.velocity.x', -200);

    // Step 5
    this.hasScored = false;

    // Step 6
    this.exists = true;
};

PipeGroup.prototype.checkWorldBounds = function() {  
  if(!this.topPipe.inWorld) {
    this.exists = false;
  }
};


module.exports = PipeGroup;



},{"./pipe":"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\pipe.js"}],"D:\\Program Files\\github\\bear-run\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function() {};

module.exports = Boot;

Boot.prototype = {

    preload: function() {
        this.load.image('preloader', 'assets/preloader.gif');
    },

    create: function() {
        this.game.input.maxPointers = 1;

        if (this.game.device.desktop) {
            this.game.scale.pageAlignHorizontally = true;
            this.game.scale.pageAlignVertically = true;
        } else {
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.setMinMax(240, 320, 480, 640);
            this.game.scale.forceOrientation(false, true);

        }

        this.game.state.start('Preloader');
    }
};
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\states\\game.js":[function(require,module,exports){
var Bird = require('../entities/bird');
var Ground = require('../entities/ground');
var PipeGroup = require('../entities/pipeGroup');

var Game = function() {
    this.testentity = null;
};

module.exports = Game;

Game.prototype = {
    
    create: function() {
        this.game.physics.startSystem(Phaser.Physics.ARCADE);
        this.game.physics.arcade.gravity.y = 1200;
        
        this.background = this.game.add.sprite(0, 0, 'background');
        this.background.width = this.game.width;
        this.background.height = this.game.height;
        
        this.bird = new Bird(this.game, 100, this.game.height / 2);
        this.game.add.existing(this.bird);
        
        this.pipes = this.game.add.group();

        //the ground
        this.ground = new Ground(this.game, 0, 400, 335, 112);
        this.game.add.existing(this.ground);
        
        
        this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.SPACEBAR]);
        
        var flapKey = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        flapKey.onDown.add(this.bird.flap, this.bird);

        //mouse click and tap
        this.input.onDown.add(this.bird.flap, this.bird);

        //add a timer
        this.pipeGenerator = this.game.time.events.loop(Phaser.Timer.SECOND * 1.25, this.generatoePipes, this);
        this.pipeGenerator.timer.start();
    
    },
    
    update: function() {
        this.game.physics.arcade.collide(this.bird, this.ground, this.deathHandler, null, this);
        // enable collisions between the bird and each group in the pipes group
        this.pipes.forEach(function(pipeGroup) {
            this.game.physics.arcade.collide(this.bird, pipeGroup, this.deathHandler, null, this);
        }, this);
    },
    generatoePipes: function() {
        var pipeY = this.game.rnd.integerInRange(-100, 100);
        var pipeGroup = this.pipes.getFirstExists(false);
        if (!pipeGroup) {
            pipeGroup = new PipeGroup(this.game, this.pipes);
        }
        pipeGroup.reset(this.game.width + pipeGroup.width / 2, pipeY);
    },
    deathHandler: function() {
//         this.game.state.start('gameover');
    },
    shutdown: function() {
        this.game.input.keyboard.removeKey(Phaser.Keyboard.SPACEBAR);
        this.bird.destroy();
        this.pipes.destroy();
    }
};

},{"../entities/bird":"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\bird.js","../entities/ground":"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\ground.js","../entities/pipeGroup":"D:\\Program Files\\github\\bear-run\\src\\js\\entities\\pipeGroup.js"}],"D:\\Program Files\\github\\bear-run\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function() {
    this.text = null;
};

module.exports = Menu;

Menu.prototype = {
    preload: function() {

    },

    create: function() {
        //make background full screen
        //method 1
        // this.background = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'background');
        //method 2
        this.background = this.game.add.sprite(0, 0, 'background');
        this.background.width = this.game.width;
        this.background.height = this.game.height;

        this.ground = this.game.add.tileSprite(0, 400, 335, 112, 'ground'); //tileSprite(x, y, width, height, key, frame, group) 
        this.ground.autoScroll(-200, 0);

        this.titleGroup = this.game.add.group();

        this.title = this.game.add.sprite(0, 0, 'title');
        this.titleGroup.add(this.title);

        this.bird = this.game.add.sprite(200, 5, 'bird');
        this.titleGroup.add(this.bird);

        this.bird.animations.add('flap');
        this.bird.animations.play('flap', 12, true);

        this.titleGroup.x = 30;
        this.titleGroup.y = 100;

        this.game.add.tween(this.titleGroup).to({
            y: 115
        }, 350, Phaser.Easing.Linear.NONE, true, 0, -1, true); //to(properties, duration, ease, autoStart, delay, repeat, yoyo)

        this.startBtn = this.game.add.button(this.game.width / 2, 300, 'startButton', this.startClick, this);
        this.startBtn.anchor.setTo(0.5,0.5);

    },

    update: function() {

    },
    startClick:function(){
      this.game.state.start('Game');
    }

};
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function(game) {
    this.asset = null;
    this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

    preload: function() {
        this.indicator = this.add.sprite(320, this.game.height / 2, 'preloader'); //sprite(x, y, key, frame, group) 
        this.indicator.anchor.setTo(0.5, 0.5);

        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
        this.load.setPreloadSprite(this.indicator);

        //load stuff
        this.load.image('background', 'assets/background.png');
        this.load.image('ground', 'assets/ground.png');
        this.load.image('title', 'assets/title.png');
        this.load.image('startButton', 'assets/start-button.png');

        //the palyer
        this.load.spritesheet('player', 'assets/player.png');//this.load.spritesheet(key, url, frameWidth, frameHeight, numberOfFrames);  
        //the bird
        this.load.spritesheet('bird', 'assets/bird.png',34,24,3);

        this.load.spritesheet('pipe','assets/pipes.png',54,320,2);
    },

    create: function() {
        // this.indicator.cropEnabled = false;
    },

    update: function() {
        if ( !! this.ready) {
            this.game.state.start('Game');
        }
    },

    onLoadComplete: function() {
        this.ready = true;
    }
};


},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"D:\\Program Files\\github\\bear-run\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
